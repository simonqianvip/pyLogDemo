# 定义logger模块，root是父类，必需存在的，其它的是自定义。
[loggers]
keys=root,simpleExample,rotatingLogger


# 定义handler
[handlers]
keys=consoleHandler,fileHandler,rotatingFileHandler

# 定义格式化输出
[formatters]
keys=simpleFormatter

[logger_root]
level=INFO
handlers=consoleHandler,fileHandler,rotatingFileHandler


#--------------------------------------------------
# 实现上面定义的logger模块，必需是[logger_xxxx]这样的形式
#--------------------------------------------------
# [logger_xxxx] logger_模块名称
# level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL
# handlers  处理类，可以有多个，用逗号分开
# qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。
# propagate 是否继承父类的log信息，0:否 1:是
[logger_simpleExample]
level=INFO
handlers=consoleHandler,fileHandler
qualname=simpleExample
propagate=0


[logger_rotatingLogger]
level=INFO
handlers=consoleHandler,rotatingFileHandler
qualname=rotatingLogger
propagate=0


#--------------------------------------------------
# handler
#--------------------------------------------------
# [handler_xxxx]
# class handler类名
# level 日志级别
# formatter，上面定义的formatter
# args handler初始化函数参数
# TimedRotatingFileHandler 这个功能太鸡肋了，是从handler被创建的时间算起，
# 不能按自然时间 rotation 切分，除非程序一直运行，否则这个功能会有问题
# 定义一个RotatingFileHandler，最多备份5个日志文件，每个日志文件最大10M
# class = RotatingFileHandler
# args = ('myapp.log', maxBytes=10*1024*1024,backupCount=5)
#--------------------------------------------------
[handler_consoleHandler]
class=StreamHandler
level=INFO
formatter=simpleFormatter
args=(sys.stdout,)

[handler_rotatingFileHandler]
class=logging.handlers.RotatingFileHandler
#RotatingFileHandler
level=INFO
formatter=simpleFormatter
#--------------------------------------------------
#1，文件名称
#2，打开文件的方式
#3，指定文件的大小(默认是byte)
#4，指定文件的备份数(保存的数量)
#--------------------------------------------------
args=('log/rotating.log', 'a',1024,10)


#--------------------------------------------------
#指定args打开文件的方式
#--------------------------------------------------
# r 以读方式打开文件，可读取文件信息。
# w 以写方式打开文件，可向文件写入信息。如文件存在，则清空该文件，再写入新内容
# a 以追加模式打开文件（即一打开文件，文件指针自动移到文件末尾），如果文件不存在则创建
# r+ 以读写方式打开文件，可对文件进行读和写操作。
# w+ 消除文件内容，然后以读写方式打开文件。
# a+ 以读写方式打开文件，并把文件指针移到文件尾。
# b  以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的。
[handler_fileHandler]
class=FileHandler
level=INFO
formatter=simpleFormatter
args=('log/spider_db.log', 'a')



#--------------------------------------------------
# 日志格式
#--------------------------------------------------
# %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745
# %(filename)s      文件名，不含目录
# %(pathname)s      目录名，完整路径
# %(funcName)s      函数名
# %(levelname)s     级别名
# %(lineno)d        行号
# %(module)s        模块名
# %(message)s       消息体
# %(name)s          日志模块名
# %(process)d       进程id
# %(processName)s   进程名
# %(thread)d        线程id
# %(threadName)s    线程名

[formatter_simpleFormatter]
format=[ %(asctime)s - %(name)s - %(module)s - %(funcName)s ] - %(levelname)s - %(message)s
datefmt=